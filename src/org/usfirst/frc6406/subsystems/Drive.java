// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6406.subsystems;

import org.usfirst.frc6406.RobotMap;
import org.usfirst.frc6406.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Drive extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rightBack = RobotMap.driveRightBack;
    private final SpeedController leftBack = RobotMap.driveLeftBack;
    private final SpeedController rightFront = RobotMap.driveRightFront;
    private final SpeedController leftFront = RobotMap.driveLeftFront;
    private final RobotDrive robotDrive = RobotMap.driveRobotDrive;
  
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder quadratureEncoder = RobotMap.driveQuadratureEncoder;
    private final Encoder quadratureEncoder2 = RobotMap.driveQuadratureEncoder2;
    

	//689.44 0.6857(For old robot)
	//private static final double METRES_TO_PULSES = 534.69 * 1; // Encoders seem to be wrong by 28% (70% speed)
	private static final double INCHES_PER_METRE = 39.37;
	private static final double WHEEL_DIAMETER = 6.0; // Wheel diameter in inches
	private static final int PULSES_PER_REV = 360; // Make configurable in future
	private static final double ENCODER_ERROR = 0.88; // Make configurable
  

	@Override
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop


    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcadeDrive(double acceleration, double steering) {
        robotDrive.arcadeDrive(acceleration, steering);
    }
    
    public void slowfoward() {
    	robotDrive.tankDrive(-0.6, -0.6);
    }
    
    public void turnleft() {
    	robotDrive.arcadeDrive(0.5 , -0.5);
    }
    
    public void turnright() {
    	robotDrive.arcadeDrive(0.5 , 0.5);
    }
    
    public void stop() {
    	robotDrive.stopMotor();
    }
    
    public void turnAngle(double forwardRate, double turnRate) {
    	robotDrive.arcadeDrive(forwardRate, turnRate);
    }

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void drive(double left, double right) {
		robotDrive.tankDrive(left, right);
	}
	
	// Utility functions
	public static double MetersToPulses(double metres) {
		return metres * INCHES_PER_METRE * PULSES_PER_REV * ENCODER_ERROR / (WHEEL_DIAMETER * Math.PI);
	}
}
