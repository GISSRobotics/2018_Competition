// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6406.subsystems;

import org.usfirst.frc6406.RobotMap;
import org.usfirst.frc6406.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;


/**
 *
 */
public class Drive extends Subsystem {



    private final SpeedController rightBack = RobotMap.driveRightBack;
    private final SpeedController leftBack = RobotMap.driveLeftBack;
    private final SpeedController rightFront = RobotMap.driveRightFront;
    private final SpeedController leftFront = RobotMap.driveLeftFront;
    private final RobotDrive robotDrive = RobotMap.driveRobotDrive;

    private final Encoder quadratureEncoder = RobotMap.driveQuadratureEncoder;
    private final Encoder quadratureEncoder2 = RobotMap.driveQuadratureEncoder2;

    @Override
    public void initDefaultCommand() {


        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void slowfoward() {
        robotDrive.tankDrive(0.6, 0.6);
    }

    public void arcadeDrive(double acceleration, double steering) {
        robotDrive.arcadeDrive(acceleration, steering);
    }

    public void turnleft() {
        robotDrive.arcadeDrive(0.5, -0.5);
    }

    public void turnright() {
        robotDrive.arcadeDrive(0.5, 0.5);
    }

    public void stop() {
        robotDrive.stopMotor();
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void drive(double left, double right) {
        robotDrive.tankDrive(left, right);
    }
}
