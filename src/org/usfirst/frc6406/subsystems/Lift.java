// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6406.subsystems;

import org.usfirst.frc6406.RobotMap;
import org.usfirst.frc6406.commands.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.SensorCollection;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.BaseMotorController;

import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Lift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    private static final int MAX_HEIGHT_TRUCK = 227000; // this is encoder data scaled to 36 inches on our twelve tooth gear
    private static final int MAX_HEIGHT_TELESCOPE = 226000;
    private static final int INCREMENT = 10000;
    private int targetHeight = 0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX truckMotor = RobotMap.lifttruckMotor;
    private final WPI_TalonSRX telescopeMotor = RobotMap.lifttelescopeMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    SensorCollection truckStatus;
    SensorCollection telescopeStatus;

    private volatile boolean watchingLimit = false;
    
    
    public int pidid = 0;

    public Lift() {        
        truckStatus = truckMotor.getSensorCollection();
        telescopeStatus = telescopeMotor.getSensorCollection();
        
        truckMotor.configClosedloopRamp(0.1, 100);
        telescopeMotor.configClosedloopRamp(0.1, 100);
                
        watchingLimit = true;
        (new Thread(() -> {limitWatcher();})).start();
        
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void limitWatcher() {
        while (watchingLimit) {
            if (!telescopeStatus.isRevLimitSwitchClosed() && telescopeMotor.getSelectedSensorPosition(0) != 0 && !(telescopeMotor.getMotorOutputPercent() > 0.0)) {
                telescopeMotor.setSelectedSensorPosition(0, pidid, 100);
                //telescopeMotor.set(0.0);
                System.out.println("Telescope encoder reset to 0.");
            }
            if (!truckStatus.isRevLimitSwitchClosed() && truckMotor.getSelectedSensorPosition(0) != 0 && !(truckMotor.getMotorOutputPercent() > 0.0)) {
                truckMotor.setSelectedSensorPosition(0, pidid, 100);
                //truckMotor.set(0.0);
                System.out.println("Truck encoder reset to 0.");
            }
        }
    }

    public void moveTelescope(double HeightIn) {
        targetHeight = (int)(HeightIn * (MAX_HEIGHT_TELESCOPE+MAX_HEIGHT_TRUCK));
        telescopeMotor.set(ControlMode.Position, -Math.min(targetHeight, MAX_HEIGHT_TELESCOPE));
        truckMotor.set(ControlMode.Position, -Math.max(0.05, targetHeight-MAX_HEIGHT_TELESCOPE));
    }
    
    public int currentHeight() {
        int a = telescopeMotor.getSelectedSensorPosition(0);
        int b = truckMotor.getSelectedSensorPosition(0);
        return -(a + b);
    }

    public void Up() {
        targetHeight = currentHeight() + 2*INCREMENT;
        targetHeight = Math.min(targetHeight, MAX_HEIGHT_TELESCOPE+MAX_HEIGHT_TRUCK);
        telescopeMotor.set(ControlMode.Position, -Math.min(targetHeight, MAX_HEIGHT_TELESCOPE));
        truckMotor.set(ControlMode.Position, -Math.max(0.05, targetHeight-MAX_HEIGHT_TELESCOPE));
    }
    
    public void Down() {
        targetHeight = currentHeight() - INCREMENT;
        targetHeight = Math.max(targetHeight, 0);
        telescopeMotor.set(ControlMode.Position, -Math.min(targetHeight, MAX_HEIGHT_TELESCOPE));
        truckMotor.set(ControlMode.Position, -Math.max(0.05, targetHeight-MAX_HEIGHT_TELESCOPE));
    }

    @Override
    public void periodic() {
        // Put code here to be run every loo

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
