// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6406.subsystems;

import org.usfirst.frc6406.Robot;
import org.usfirst.frc6406.RobotMap;
import org.usfirst.frc6406.commands.*;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.SensorCollection;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import com.ctre.phoenix.motorcontrol.can.BaseMotorController;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 *
 */
public class Lift extends Subsystem {

    private static final int MAX_HEIGHT_TRUCK = 300000; // this is encoder data scaled to 36 inches on our twelve tooth gear
    private static final int MAX_HEIGHT_TELESCOPE = 230000;
    private static final int DOWN_INCREMENT = 20000;
    private static final int UP_INCREMENT = 4 * DOWN_INCREMENT;
    private static final int TOLERANCE = 10000;
    private boolean truckInit = false;
    private boolean telescopeInit = false;
    private final WPI_TalonSRX truckMotor = RobotMap.liftTruckMotor;
    private final WPI_TalonSRX telescopeMotor = RobotMap.liftTelescopeMotor;

    SensorCollection truckStatus;
    SensorCollection telescopeStatus;

    public int pidid = 0;

    public Lift() {
        if (truckMotor != null) {
            truckStatus = truckMotor.getSensorCollection();
            truckMotor.configClosedloopRamp(0.1, 100);
        }
        if (telescopeMotor != null) {
            telescopeStatus = telescopeMotor.getSensorCollection();
            telescopeMotor.configClosedloopRamp(0.1, 100);
        }

    }

    @Override
    public void initDefaultCommand() {

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    public int currentHeight() {
        int a = telescopeMotor != null ? telescopeMotor.getSelectedSensorPosition(0) : 0;
        int b = truckMotor != null ? truckMotor.getSelectedSensorPosition(0) : 0;
        return -(a + b);
    }

    public void moveTelescope(double HeightIn) {
        // Takes height in percentage of total height
        MoveToTarget((int) (HeightIn * (MAX_HEIGHT_TELESCOPE + MAX_HEIGHT_TRUCK)));
    }

    public void Up() {
        Move(0.5);
    }

    public void Down() {
        Move(-0.5);
    }

    public void Move(double percentage) {
        if (percentage >= 0.0) {
            MoveToTarget(currentHeight() + (int) (UP_INCREMENT * percentage));
        } else {
            MoveToTarget(currentHeight() + (int) (DOWN_INCREMENT * percentage));
        }
    }

    private void MoveToTarget(int pos) {
        // Keep pos in range
        pos = Math.max(Math.min(pos, MAX_HEIGHT_TELESCOPE + MAX_HEIGHT_TRUCK), 0);
        // telescope can't go lower than 5%
        int telescopeTarget = Math.max(pos - MAX_HEIGHT_TRUCK, (int) (0.0 * MAX_HEIGHT_TELESCOPE));
        // truck can't go lower than 5%
        int truckTarget = Math.max(Math.min(pos, MAX_HEIGHT_TRUCK), (int) (0.0 * MAX_HEIGHT_TRUCK));

        // Encoder counts are actually negative
        telescopeTarget *= -1;
        truckTarget *= -1;

        Robot.Log("target:" + telescopeTarget + ", " + truckTarget, 2);
        if (telescopeMotor != null) {
            telescopeMotor.set(ControlMode.Position, telescopeTarget);
        }
        if (truckMotor != null) {
            truckMotor.set(ControlMode.Position, truckTarget);
        }
        SmartDashboard.putNumber("telescope-position", pos);
    }

    @Override
    public void periodic() {

        // Put code here to be run every loop
        if (telescopeMotor != null && telescopeMotor.getSelectedSensorPosition(0) != 10000 && telescopeMotor.getMotorOutputPercent() >= 0.0) {
            if (!telescopeStatus.isRevLimitSwitchClosed()) {
                telescopeInit = true;
                telescopeMotor.setSelectedSensorPosition(10000, pidid, 100);
                Robot.Log("Telescope encoder reset to 0.", 1);
                telescopeMotor.set(0.0);
            }

        }
        if (!telescopeInit) {
            telescopeMotor.set(0.2);
        }

        if (truckMotor != null && truckMotor.getSelectedSensorPosition(0) != 10000 && truckMotor.getMotorOutputPercent() >= 0.0) {
            if (!truckStatus.isRevLimitSwitchClosed()) {
                truckInit = true;
                truckMotor.setSelectedSensorPosition(10000, pidid, 100);
                Robot.Log("Truck encoder reset to 0.", 1);
                truckMotor.set(0.0);
            }

        }
        if (!truckInit) {
            truckMotor.set(0.2);
        }
        
        SmartDashboard.putNumber("Truck Current", RobotMap.PDP.getCurrent(15));
        SmartDashboard.putNumber("Telescope Current", RobotMap.PDP.getCurrent(2));
        SmartDashboard.putNumber("Tel VOlts", RobotMap.liftTelescopeMotor.getMotorOutputVoltage());
    }

    public void stop() {
        if (telescopeMotor != null) {
            telescopeMotor.set(0.0);
        }
        if (truckMotor != null) {
            truckMotor.set(0.0);
        }
    }
    
    public boolean onTarget() {
    	return Math.abs(telescopeMotor.getClosedLoopError(0)) < TOLERANCE && Math.abs(truckMotor.getClosedLoopError(0)) < TOLERANCE;
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
