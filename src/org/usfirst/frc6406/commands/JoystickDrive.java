// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6406.commands;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6406.Robot;

/**
 *
 */
public class JoystickDrive extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private static final double DRIVE_DEAD_ZONE = 0.2;
    public static double TURN_SENSITIVITY = 1;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public JoystickDrive() {

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        /*
         * Joystick stick = Robot.oi.stick; // double reverse = stick.getRawButton(2) ?
         * -1.0 : 1.0; double sensitivity = (stick.getRawAxis(3) / -2.0) + 0.5;
         * SmartDashboard.putNumber("Sensitivity", sensitivity); //
         * Robot.drive.drive(-stick.getRawAxis(1)*sensitivity*reverse, //
         * -stick.getRawAxis(0)*sensitivity); double axis1 = stick.getRawAxis(1) *
         * sensitivity; double axis0 = stick.getRawAxis(0) * TURN_SENSITIVITY;
         * Robot.drive.drive(translateSpeed(axis1 + axis0), translateSpeed(axis1 -
         * axis0));
         */

        Joystick stick = Robot.oi.stick;
        double acceleration = stick.getRawAxis(1);
        double steering = -stick.getRawAxis(0);
        double driveSensitivity = (stick.getRawAxis(3) / -4.0) + 0.75;
        double steeringSensitivity = (stick.getRawAxis(3) / -3.0) + 0.66;
        double reverse = (stick.getRawButton(1)) ? -1 : 1;
        Robot.drive.arcadeDrive(acceleration * driveSensitivity * reverse, steering * steeringSensitivity);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}

