// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6406.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import com.kauailabs.navx.frc.AHRS;
import org.usfirst.frc6406.Robot;
import org.usfirst.frc6406.RobotMap;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class DriveFoward extends Command {
	
	AHRS ahrs;
	float distance;
	float curr;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveFoward() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }
    
    public DriveFoward(float dist) {
    	distance = dist;
    	requires(Robot.drive);
		
    	
    	
    };

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	try {
			/* Communicate w/navX-MXP via the MXP SPI Bus. */
			/* Alternatively: I2C.Port.kMXP, SerialPort.Port.kMXP or SerialPort.Port.kUSB */
			/*
			 * See http://navx-mxp.kauailabs.com/guidance/selecting-an-interface/ for
			 * details.
			 */
			ahrs = new AHRS(SPI.Port.kMXP);
			while (ahrs.isCalibrating()) {
				Timer.delay(1);
			}
			ahrs.resetDisplacement();
		//	distance += ahrs.getDisplacementY();
			SmartDashboard.putBoolean("IMU_Connected", ahrs.isConnected());
			

		} catch (RuntimeException ex) {
			DriverStation.reportError("Error instantiating navX-MXP:  " + ex.getMessage(), true);
		}
    }	

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	RobotMap.driveMotorDeck.tankDrive(0.5, 0.55);
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
    	curr = ahrs.getDisplacementY();
    	SmartDashboard.putBoolean("IMU_Connected", ahrs.isConnected());
    	SmartDashboard.putNumber("curr:", curr);
    	SmartDashboard.putNumber("distance:", distance);
    	SmartDashboard.putNumber("currx:",  ahrs.getDisplacementX());
    	SmartDashboard.putNumber("curry:",  ahrs.getDisplacementY());
    	SmartDashboard.putNumber("currz:",  ahrs.getDisplacementZ());
    	
        return Math.abs(curr)>=distance;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
