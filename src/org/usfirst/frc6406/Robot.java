// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6406;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;

import org.usfirst.frc6406.commands.AutoGroup;
import org.usfirst.frc6406.commands.Climb;
import org.usfirst.frc6406.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {
	
	public static final int LOG_VERBOSITY = 1; // 0=nothing; 1=some occasional stuff; 2=everything

    public static OI oi;
    private AutoGroup ag;
    public static Cameras cameras;

    public static Claw claw;
    public static Wrist wrist;
    public static Drive drive;
    public static Sensors sensors;
    public static Climber climber;
    public static Lift lift;
    
    private long lastTime = -1; // Controller check timer
    public static boolean isTeleopEnabled = false;


    /**
     * This function is run when the robot is first started up and should be used
     * for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();

        claw = new Claw();
        wrist = new Wrist();
        drive = new Drive();
        sensors = new Sensors();
        climber = new Climber();
        lift = new Lift();

        oi = new OI();
        cameras = new Cameras();
    }

    /**
     * This function is called when the disabled button is hit. You can use it to
     * reset subsystems before shutting down.
     */
    @Override
    public void disabledInit() {
        ag = null;
        isTeleopEnabled = false;
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        ag = new AutoGroup();
        ag.start();
        isTeleopEnabled = false;
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (ag != null) {
            ag.cancel();
            ag = null;
        }
        isTeleopEnabled = true;
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        long thisTime = (System.currentTimeMillis() / 1000) % 2;
        if (thisTime != lastTime) oi.checkSticks();
        lastTime = thisTime;
        oi.RunAxes();
    }
    
    public static void Log(String msg, int min_verbosity) {
    	if (LOG_VERBOSITY >= min_verbosity) {
    		System.out.println(msg);
    	}
    }
}
